// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/counter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskExchangerClient is the client API for TaskExchanger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskExchangerClient interface {
	SendTask(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Task, error)
	GetTask(ctx context.Context, in *TaskResult, opts ...grpc.CallOption) (*Null, error)
}

type taskExchangerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskExchangerClient(cc grpc.ClientConnInterface) TaskExchangerClient {
	return &taskExchangerClient{cc}
}

func (c *taskExchangerClient) SendTask(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/counter.TaskExchanger/SendTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskExchangerClient) GetTask(ctx context.Context, in *TaskResult, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/counter.TaskExchanger/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskExchangerServer is the server API for TaskExchanger service.
// All implementations must embed UnimplementedTaskExchangerServer
// for forward compatibility
type TaskExchangerServer interface {
	SendTask(context.Context, *Null) (*Task, error)
	GetTask(context.Context, *TaskResult) (*Null, error)
	mustEmbedUnimplementedTaskExchangerServer()
}

// UnimplementedTaskExchangerServer must be embedded to have forward compatible implementations.
type UnimplementedTaskExchangerServer struct {
}

func (UnimplementedTaskExchangerServer) SendTask(context.Context, *Null) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTask not implemented")
}
func (UnimplementedTaskExchangerServer) GetTask(context.Context, *TaskResult) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskExchangerServer) mustEmbedUnimplementedTaskExchangerServer() {}

// UnsafeTaskExchangerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskExchangerServer will
// result in compilation errors.
type UnsafeTaskExchangerServer interface {
	mustEmbedUnimplementedTaskExchangerServer()
}

func RegisterTaskExchangerServer(s grpc.ServiceRegistrar, srv TaskExchangerServer) {
	s.RegisterService(&TaskExchanger_ServiceDesc, srv)
}

func _TaskExchanger_SendTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExchangerServer).SendTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counter.TaskExchanger/SendTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExchangerServer).SendTask(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskExchanger_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExchangerServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counter.TaskExchanger/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExchangerServer).GetTask(ctx, req.(*TaskResult))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskExchanger_ServiceDesc is the grpc.ServiceDesc for TaskExchanger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskExchanger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "counter.TaskExchanger",
	HandlerType: (*TaskExchangerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTask",
			Handler:    _TaskExchanger_SendTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskExchanger_GetTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/counter.proto",
}
